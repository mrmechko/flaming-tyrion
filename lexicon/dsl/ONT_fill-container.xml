<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="ont-type.xsl"?>
<dsl>
 <provenance name="TRIPS"/>
 <concept name="ont::fill-container">
 <relation label="inherit">
  ont::filling
 </relation>
 <relation label="overlap">
  wn::|fill%2:30:01|
  wn::|fill_up%2:30:00|
  wn::|make_full%2:30:00|
  wn::|charge%2:35:00|
 </relation>
 <sem-frame>
  <role-restr-map roles="ont::affected-result">
   <sem-feats>
    <relation label="inherit">
     phys-obj
    </relation>
    <feat name="container">+</feat>
   </sem-feats>
  </role-restr-map>
 </sem-frame>
 </concept>
 <concept name="ont::root" />
 <or>
 <concept name="phys-obj" />
 <concept name="abstr-obj" />
 <concept name="situation" />
 <concept name="proposition" />
 </or>
 <concept name="ont::any-sem">
 <relation label="inherit">
  ont::root
 </relation>
 </concept>
 <sem-feats>
 <relation label="inherit">
  situation
 </relation>
 <feat name="container">-</feat>
 <feat name="information">mental-construct</feat>
 <feat name="intentional">-</feat>
 </sem-feats>
 <concept name="ont::referential-sem">
 <relation label="inherit">
  ont::any-sem
 </relation>
 <relation label="overlap">
  wn::|entity%1:03:00|
 </relation>
 <or>
  <concept name="phys-obj" />
  <concept name="abstr-obj" />
  <concept name="situation" />
  <concept name="proposition" />
 </or>
 </concept>
 <sem-frame>
 <role-restr-map roles="ont::beneficiary" optional="optional">
  <concept name="phys-obj" />
 </role-restr-map>
 <role-restr-map roles="ont::result" optional="optional">
  <or>
   <concept name="situation" />
   <concept name="abstr-obj" />
   <concept name="phys-obj" />
  </or>
 </role-restr-map>
 <role-restr-map roles="ont::affected" optional="optional">
  <or>
   <concept name="situation" />
   <concept name="abstr-obj" />
   <concept name="phys-obj" />
  </or>
 </role-restr-map>
 <role-restr-map roles="ont::agent" optional="optional">
  <or>
   <concept name="situation" />
   <concept name="abstr-obj" />
   <concept name="phys-obj" />
  </or>
 </role-restr-map>
 </sem-frame>
 <sem-feats>
 <relation label="inherit">
  situation
 </relation>
 <feat name="aspect">dynamic</feat>
 </sem-feats>
 <concept name="ont::situation-root">
 <relation label="inherit">
  ont::referential-sem
 </relation>
 <sem-feats>
  <relation label="inherit">
   situation
  </relation>
  <feat name="container">-</feat>
  <feat name="information">mental-construct</feat>
  <feat name="intentional">-</feat>
 </sem-feats>
 </concept>
 <sem-frame>
 <role-restr-map roles="ont::agent">
  <or>
   <concept name="situation" />
   <concept name="abstr-obj" />
   <concept name="phys-obj" />
  </or>
 </role-restr-map>
 </sem-frame>
 <sem-feats>
 <relation label="inherit">
  situation
 </relation>
 <feat name="cause">force</feat>
 </sem-feats>
 <concept name="ont::event-of-change">
 <relation label="inherit">
  ont::situation-root
 </relation>
 <sem-feats>
  <relation label="inherit">
   situation
  </relation>
  <feat name="aspect">dynamic</feat>
 </sem-feats>
 <sem-frame>
  <role-restr-map roles="ont::beneficiary" optional="optional">
   <concept name="phys-obj" />
  </role-restr-map>
  <role-restr-map roles="ont::result" optional="optional">
   <or>
    <concept name="situation" />
    <concept name="abstr-obj" />
    <concept name="phys-obj" />
   </or>
  </role-restr-map>
  <role-restr-map roles="ont::affected" optional="optional">
   <or>
    <concept name="situation" />
    <concept name="abstr-obj" />
    <concept name="phys-obj" />
   </or>
  </role-restr-map>
  <role-restr-map roles="ont::agent" optional="optional">
   <or>
    <concept name="situation" />
    <concept name="abstr-obj" />
    <concept name="phys-obj" />
   </or>
  </role-restr-map>
 </sem-frame>
 </concept>
 <concept name="situation" />
 <sem-frame>
 <role-restr-map roles="ont::affected">
  <or>
   <concept name="abstr-obj" />
   <concept name="phys-obj" />
   <concept name="situation" />
  </or>
 </role-restr-map>
 </sem-frame>
 <concept name="ont::event-of-action">
 <relation label="inherit">
  ont::event-of-change
 </relation>
 <sem-feats>
  <relation label="inherit">
   situation
  </relation>
  <feat name="cause">force</feat>
 </sem-feats>
 <sem-frame>
  <role-restr-map roles="ont::agent">
   <or>
    <concept name="situation" />
    <concept name="abstr-obj" />
    <concept name="phys-obj" />
   </or>
  </role-restr-map>
 </sem-frame>
 </concept>
 <sem-frame>
 <role-restr-map roles="ont::extent" optional="optional">
  <sem-feats>
   <relation label="inherit">
    abstr-obj
   </relation>
   <feat name="type">quantity</feat>
  </sem-feats>
 </role-restr-map>
 <role-restr-map roles="ont::agent" optional="optional">
  <or>
   <concept name="phys-obj" />
   <concept name="situation" />
   <concept name="abstr-obj" />
  </or>
 </role-restr-map>
 <role-restr-map roles="ont::result" optional="optional">
  <concept name="t" />
 </role-restr-map>
 <role-restr-map roles="ont::source" optional="optional">
  <concept name="t" />
 </role-restr-map>
 <role-restr-map roles="ont::affected">
  <or>
   <concept name="phys-obj" />
   <concept name="abstr-obj" />
   <concept name="situation" />
   <concept name="time" />
  </or>
 </role-restr-map>
 </sem-frame>
 <sem-feats>
 <relation label="inherit">
  situation
 </relation>
 <feat name="aspect">dynamic</feat>
 <feat name="cause">
 <or>
  force
  -
 </or>
 </feat>
 </sem-feats>
 <concept name="ont::event-of-causation">
 <relation label="inherit">
  ont::event-of-action
  situation
 </relation>
 <sem-frame>
  <role-restr-map roles="ont::affected">
   <or>
    <concept name="abstr-obj" />
    <concept name="phys-obj" />
    <concept name="situation" />
   </or>
  </role-restr-map>
 </sem-frame>
 </concept>
 <sem-frame>
 <role-restr-map roles="ont::affected-result">
  <concept name="t" />
 </role-restr-map>
 </sem-frame>
 <concept name="ont::motion">
 <relation label="inherit">
  ont::event-of-causation
 </relation>
 <sem-feats>
  <relation label="inherit">
   situation
  </relation>
  <feat name="aspect">dynamic</feat>
  <feat name="cause">
  <or>
   force
   -
  </or>
  </feat>
 </sem-feats>
 <sem-frame>
  <role-restr-map roles="ont::extent" optional="optional">
   <sem-feats>
    <relation label="inherit">
     abstr-obj
    </relation>
    <feat name="type">quantity</feat>
   </sem-feats>
  </role-restr-map>
  <role-restr-map roles="ont::agent" optional="optional">
   <or>
    <concept name="phys-obj" />
    <concept name="situation" />
    <concept name="abstr-obj" />
   </or>
  </role-restr-map>
  <role-restr-map roles="ont::result" optional="optional">
   <concept name="t" />
  </role-restr-map>
  <role-restr-map roles="ont::source" optional="optional">
   <concept name="t" />
  </role-restr-map>
  <role-restr-map roles="ont::affected">
   <or>
    <concept name="phys-obj" />
    <concept name="abstr-obj" />
    <concept name="situation" />
    <concept name="time" />
   </or>
  </role-restr-map>
 </sem-frame>
 </concept>
 <sem-frame>
 <role-restr-map roles="ont::affected-result">
  <sem-feats>
   <relation label="inherit">
    phys-obj
   </relation>
   <feat name="container">+</feat>
  </sem-feats>
 </role-restr-map>
 </sem-frame>
 <concept name="ont::filling">
 <relation label="inherit">
  ont::motion
 </relation>
 <relation label="overlap">
  wn::|impregnate%2:30:00|
  wn::|saturate%2:30:04|
  wn::|spread%2:35:13|
 </relation>
 <sem-frame>
  <role-restr-map roles="ont::affected-result">
   <concept name="t" />
  </role-restr-map>
 </sem-frame>
 </concept>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="charge" />
 </morph>
 <example text="charge the battery">
  <provenance name="TRIPS"/>
 </example>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-xp-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">atomic</feat>
   <feat name="aspect">bounded</feat>
  </sem-feats>
 </semantics>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="cram" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="cram" />
 </morph>
 <example text="cram the oranges in/into/on the truck">
  <provenance name="TRIPS"/>
 </example>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-goal-templ" xp="'(w::pp
                                                                 (w::or w::on
                                                                        w::into
                                                                        w::in))" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="(w::or w::on
                                                               w::into
                                                               w::in)" sem-role="ont::result"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">extended</feat>
   <feat name="aspect">bounded</feat>
  </sem-feats>
 </semantics>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="crowd" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-goal-optional-templ" xp="'(w::pp
                                                                          (w::or
                                                                           w::on
                                                                           w::into
                                                                           w::in))" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="(w::or w::on
                                                               w::into
                                                               w::in)" sem-role="ont::result" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="crowd" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="crowd" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-goal-templ" xp="'(w::pp
                                                                 (w::or w::on
                                                                        w::into
                                                                        w::in))" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="(w::or w::on
                                                               w::into
                                                               w::in)" sem-role="ont::result"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="fill" />
 </morph>
 <provenance name="TRIPS">
  <provenance name="BASE500"/>
 </provenance>
 <example text="fill the truck with oj">
 </example>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">extended</feat>
   <feat name="aspect">bounded</feat>
   <feat name="cause">agentive</feat>
  </sem-feats>
 </semantics>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="fill" />
 </morph>
 <provenance name="TRIPS">
  <provenance name="BASE500"/>
 </provenance>
 <example text="the container filled">
 </example>
 <relation label="inherit">
  ont::fill-container
  ont::affected-templ
 </relation>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="fill" remaining-words="" particle="up" />
 </morph>
 <example text="fill up the truck with oj">
  <provenance name="TRIPS"/>
 </example>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">extended</feat>
   <feat name="aspect">bounded</feat>
   <feat name="cause">agentive</feat>
  </sem-feats>
 </semantics>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="heap" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="heap" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-goal-optional-templ" xp="'(w::pp
                                                                          (w::or
                                                                           w::into
                                                                           w::in))" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="(w::or w::into w::in)" sem-role="ont::result" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="jam" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-goal-optional-templ" xp="'(w::pp
                                                                          (w::or
                                                                           w::on
                                                                           w::into
                                                                           w::in))" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="(w::or w::on
                                                               w::into
                                                               w::in)" sem-role="ont::result" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="jam" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="load" />
 </morph>
 <example text="load the truck with oj">
  <provenance name="TRIPS"/>
 </example>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">extended</feat>
   <feat name="aspect">bounded</feat>
  </sem-feats>
 </semantics>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="load" remaining-words="" particle="up" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-xp-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">extended</feat>
   <feat name="aspect">bounded</feat>
  </sem-feats>
 </semantics>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="load" remaining-words="" particle="up" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">extended</feat>
   <feat name="aspect">bounded</feat>
  </sem-feats>
 </semantics>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="mound" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="mound" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-goal-optional-templ" xp="'(w::pp
                                                                          (w::or
                                                                           w::into
                                                                           w::in))" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="(w::or w::into w::in)" sem-role="ont::result" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="pack" />
 </morph>
 <example text="pack the oranges into the boxcar">
  <provenance name="TRIPS"/>
 </example>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-goal-optional-templ" xp="'(w::pp
                                                                          (w::or
                                                                           w::on
                                                                           w::onto
                                                                           w::into
                                                                           w::in))" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="(w::or w::on
                                                               w::onto
                                                               w::into
                                                               w::in)" sem-role="ont::result" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">extended</feat>
   <feat name="aspect">bounded</feat>
   <feat name="cause">agentive</feat>
  </sem-feats>
 </semantics>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="pack" />
 </morph>
 <example text="pack the truck with oranges">
  <provenance name="TRIPS"/>
 </example>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">extended</feat>
   <feat name="aspect">bounded</feat>
   <feat name="cause">agentive</feat>
  </sem-feats>
 </semantics>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="pack" remaining-words="" particle="up" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-xp-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">extended</feat>
   <feat name="aspect">bounded</feat>
   <feat name="cause">agentive</feat>
  </sem-feats>
 </semantics>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="pack" remaining-words="" particle="up" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">extended</feat>
   <feat name="aspect">bounded</feat>
   <feat name="cause">agentive</feat>
  </sem-feats>
 </semantics>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="pile" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-goal-optional-templ" xp="'(w::pp
                                                                          (w::or
                                                                           w::on
                                                                           w::onto
                                                                           w::into
                                                                           w::in))" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="(w::or w::on
                                                               w::onto
                                                               w::into
                                                               w::in)" sem-role="ont::result" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="pile" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="recharge" />
 </morph>
 <example text="recharge the battery">
  <provenance name="TRIPS"/>
 </example>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-xp-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">atomic</feat>
   <feat name="aspect">bounded</feat>
  </sem-feats>
 </semantics>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="stack" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="stack" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-goal-optional-templ" xp="'(w::pp
                                                                          (w::or
                                                                           w::into
                                                                           w::in))" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="(w::or w::into w::in)" sem-role="ont::result" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="stock" />
 </morph>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-goal-affected-templ" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="w::with" sem-role="ont::affected" optional="optional"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 </sense>
 <sense>
 <morph>
  <pos pos="v" />
  <word first-word="stuff" />
 </morph>
 <example text="stuff the people in/into the rescue vehicle (like sardines)">
  <provenance name="TRIPS"/>
 </example>
 <relation label="inherit">
  ont::fill-container
 </relation>
 <syntax>
  <template-call template="ont::agent-affected-goal-templ" xp="'(w::pp
                                                                 (w::or w::into
                                                                        w::in))" />
  <syn-sem>
   <syn-sem-map syn-arg="lcomp" syn-cat="pp" head-word="(w::or w::into w::in)" sem-role="ont::result"/>
   <syn-sem-map syn-arg="lobj" syn-cat="np" sem-role="ont::affected"/>
   <syn-sem-map syn-arg="lsubj" syn-cat="np" sem-role="ont::agent"/>
  </syn-sem>
 </syntax>
 <semantics>
  <sem-feats>
   <feat name="time-span">extended</feat>
   <feat name="aspect">bounded</feat>
   <feat name="cause">agentive</feat>
  </sem-feats>
 </semantics>
 </sense>
</dsl>
